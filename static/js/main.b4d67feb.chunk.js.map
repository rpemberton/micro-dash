{"version":3,"sources":["components/Widget.js","components/Meter.js","utils.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Widget","props","react_default","a","createElement","className","children","Meter","_ref","data","_ref$value","value","_ref$max","max","_ref$min","min","format","unit","error","isLoading","hasData","rotateDeg","valuePercOfRange","Math","ceil","getRotateDeg","meterText","meterValue","Intl","NumberFormat","style","currency","maximumSignificantDigits","formatCurency","visibility","transform","concat","Dashboard","state","meterData","this","init","_this2","getMeterData","then","res","some","isNaN","isValidMeterData","Error","newMeterData","Object","assign","setTimeout","setState","catch","err","console","fetch","ok","statusText","json","components_Widget","components_Meter","Component","App","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4d67feb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Widget(props) {\n  return <div className='Widget'>{props.children}</div>;\n}\n\nexport default Widget;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatCurency, getRotateDeg } from '../utils';\n\nfunction Meter(props) {\n  const {\n    value = 0,\n    max = 1,\n    min = 0,\n    format,\n    unit,\n    error,\n    isLoading\n  } = props.data || {};\n\n  const hasData = typeof props.data.value === 'number';\n  const rotateDeg = getRotateDeg(min, max, value);\n  let meterText = isLoading ? 'Loading...' : 'css-o-meter';\n\n  if (error) {\n    meterText = 'Error. Try refreshing.';\n  }\n\n  let meterValue = value;\n\n  if (format === 'currency' && unit) {\n    meterValue = formatCurency(unit, value);\n  }\n\n  return (\n    <div className=\"Meter\">\n      <div\n        className=\"Meter__val\"\n        style={{ visibility: hasData ? \"visible\" : \"hidden\" }}\n      >\n        {meterValue}\n      </div>\n\n      <div className=\"Meter__dial\">\n        <div className=\"Meter__arc-clip\">\n          <div\n            className=\"Meter__arc\"\n            style={{ transform: `rotate(-45deg) rotate(${rotateDeg}deg)` }}\n          />\n        </div>\n\n        <div\n          className=\"Meter__needle\"\n          style={{ transform: `rotate(-90deg) rotate(${rotateDeg}deg)` }}\n        />\n        <div className=\"Meter__needle-base\" />\n\n        <div\n          className=\"Meter__min\"\n          style={{ visibility: hasData ? \"visible\" : \"hidden\" }}\n        >\n          {min}\n        </div>\n        <div\n          className=\"Meter__max\"\n          style={{ visibility: hasData ? \"visible\" : \"hidden\" }}\n        >\n          {max}\n        </div>\n      </div>\n\n      <p className=\"Meter__info\">{meterText}</p>\n    </div>\n  );\n}\n\nMeter.propTypes = {\n  data: PropTypes.shape({\n    min: PropTypes.number,\n    max: PropTypes.number,\n    value: PropTypes.number,\n    isLoading: PropTypes.bool,\n    error: PropTypes.bool\n  })\n};\n\nexport default Meter;\n","export function isValidMeterData(data) {\n  const { min, max, value } = data;\n\n  if ([min, max, value].some(isNaN)) {\n    return false;\n  }\n  if (min > max) {\n    return false;\n  }\n  if (value < min || value > max) {\n    return false;\n  }\n  return true;\n}\n\nexport function formatCurency(unit, value) {\n  return new Intl.NumberFormat('en-GB', {\n    style: 'currency',\n    currency: unit,\n    maximumSignificantDigits: 2\n  }).format(value);\n}\n\nexport function getRotateDeg(min, max, value) {\n  const range = max - min;\n  const valuePercOfRange = ((value - min) / range) * 100;\n  const rotateDeg = Math.ceil(180 * (valuePercOfRange / 100));\n\n  return rotateDeg;\n}\n","import React, { Component } from 'react';\n\nimport Widget from './Widget';\nimport Meter from './Meter';\n\nimport { isValidMeterData } from '../utils';\n\nclass Dashboard extends Component {\n  state = {\n    meterData: {\n      isLoading: true,\n      error: false,\n    }\n  };\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    this.getMeterData()\n      .then(res => {\n        if (!isValidMeterData(res)) {\n          throw new Error('Bad data');\n        }\n\n        const newMeterData = Object.assign(this.state.meterData, res);\n        newMeterData.isLoading = false;\n\n        // delay to show loading state\n        setTimeout(() => {\n          this.setState({ meterData: newMeterData });\n        }, 500);\n      })\n      .catch(err => {\n        this.setState({\n          meterData: { error: true } ,\n          isLoading: false,\n        });\n\n        console.error(err);\n      });\n  }\n\n  getMeterData() {\n    return fetch('https://widgister.herokuapp.com/challenge/frontend')\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.json();\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Widget>\n          <Meter data={this.state.meterData} />\n        </Widget>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\n\nimport Dashboard from './components/Dashboard';\n\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}